-- LW_1

CREATE TABLE customers (
	personal_account_number BIGINT PRIMARY KEY,
	last_name VARCHAR(50) NOT NULL,
	first_name VARCHAR(50) NOT NULL,
	patronymic VARCHAR(50),
	email TEXT UNIQUE NOT NULL,
	birth_date DATE NOT NULL,
	hashed_password VARCHAR(50) NOT NULL
);

CREATE TABLE traffic_plans (
	traffic_plan_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	title VARCHAR(50) NOT NULL,
	monthly_cost REAL NOT NULL,
	internet_data_limit REAL DEFAULT 0,
	call_minutes_limit INT DEFAULT 0,
	messages_limit INT DEFAULT 0
);

CREATE TABLE sim_cards (
	phone_number VARCHAR(50) PRIMARY KEY,
	registration_date DATE NOT NULL,
	balance REAL NOT NULL,
	traffic_plan_id INT NOT NULL,
	personal_account_number BIGINT NOT NULL,
	FOREIGN KEY (traffic_plan_id) REFERENCES traffic_plans (traffic_plan_id) ON DELETE CASCADE,
	FOREIGN KEY (personal_account_number) REFERENCES customers (personal_account_number) ON DELETE CASCADE
);

CREATE TABLE customer_to_customer (
	customer_to_customer_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	initiator_phone_number VARCHAR(50) NOT NULL,
	interlocutor_phone_number VARCHAR(50) NOT NULL,
	FOREIGN KEY (initiator_phone_number) REFERENCES sim_cards (phone_number) ON DELETE CASCADE,
	FOREIGN KEY (interlocutor_phone_number) REFERENCES sim_cards (phone_number) ON DELETE CASCADE
);

CREATE TABLE customer_to_other (
	customer_to_other_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	customer_is_initiator BOOL NOT NULL,
	other_phone_number VARCHAR(50) NOT NULL,
	customer_phone_number VARCHAR(50) NOT NULL,
	FOREIGN KEY (customer_phone_number) REFERENCES sim_cards (phone_number) ON DELETE CASCADE
);

CREATE TABLE messages (
	message_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	message_content VARCHAR(255) NOT NULL,
	message_date_time TIMESTAMP,
	customer_to_customer_id INT,
	customer_to_other_id INT,
	FOREIGN KEY (customer_to_customer_id) REFERENCES customer_to_customer (customer_to_customer_id) ON DELETE CASCADE,
	FOREIGN KEY (customer_to_other_id) REFERENCES customer_to_other (customer_to_other_id) ON DELETE CASCADE
);

CREATE TABLE calls (
	call_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	call_date_time TIMESTAMP NOT NULL,
	call_duration INT NOT NULL,
	customer_to_customer_id INT,
	customer_to_other_id INT,
	FOREIGN KEY (customer_to_customer_id) REFERENCES customer_to_customer (customer_to_customer_id) ON DELETE CASCADE,
	FOREIGN KEY (customer_to_other_id) REFERENCES customer_to_other (customer_to_other_id) ON DELETE CASCADE
);

INSERT INTO customers (personal_account_number, last_name, first_name, patronymic, email, birth_date, hashed_password)
VALUES 
(1000000001, 'Иванов', 'Иван', 'Иванович', 'ivanov@example.com', '1990-01-15', 'hashed_password_1'),
(1000000002, 'Петров', 'Петр', 'Петрович', 'petrov@example.com', '1985-05-20', 'hashed_password_2'),
(1000000003, 'Сидорова', 'Анна', 'Сергеевна', 'sidorova@example.com', '1992-03-10', 'hashed_password_3');

INSERT INTO traffic_plans (title, monthly_cost, internet_data_limit, call_minutes_limit, messages_limit)
VALUES 
('Базовый', 300.00, 5000, 300, 100),
('Стандартный', 500.00, 10000, 600, 200),
('Премиум', 700.00, 15000, 1200, 300);

INSERT INTO sim_cards (phone_number, registration_date, balance, traffic_plan_id, personal_account_number)
VALUES 
('89001234567', '2023-01-01', 200.00, 1, 1000000001),
('89007654321', '2023-02-01', 300.00, 2, 1000000002),
('89009876543', '2023-03-01', 230.00, 3, 1000000003);

INSERT INTO customer_to_customer (initiator_phone_number, interlocutor_phone_number)
VALUES 
('89001234567', '89007654321'),
('89007654321', '89009876543');

INSERT INTO customer_to_other (customer_is_initiator, other_phone_number, customer_phone_number)
VALUES 
(TRUE, '89001112233', '89001234567'),
(FALSE, '89004445566', '89007654321');


INSERT INTO messages (message_content, message_date_time, customer_to_customer_id, customer_to_other_id)
VALUES 
('Привет! Как дела?', NOW(), 1, NULL),
('Все отлично! А у тебя?', NOW(), 1, NULL),
('Не могу говорить сейчас.', NOW(), NULL, 1);

INSERT INTO calls (call_date_time, call_duration, customer_to_customer_id, customer_to_other_id)
VALUES 
(NOW(), 120, 1, NULL),
(NOW(), 90, NULL, 1);


SELECT * FROM customers;
SELECT * FROM sim_cards;
SELECT * FROM traffic_plans;
SELECT * FROM customer_to_customer;
SELECT * FROM customer_to_other;
SELECT * FROM calls;
SELECT * FROM messages;

CREATE OR REPLACE FUNCTION get_messages_rest(ph_number VARCHAR(50))
RETURNS INT
LANGUAGE plpgsql
AS
$$
DECLARE
   rest INT;
BEGIN
   SELECT tp.messages_limit
   INTO rest
   FROM traffic_plans tp
   WHERE
   tp.traffic_plan_id = (SELECT sc.traffic_plan_id FROM sim_cards sc WHERE sc.phone_number = ph_number);

   SELECT rest - COUNT(*)
   INTO rest
   FROM
   (SELECT ctc.customer_to_customer_id FROM customer_to_customer ctc WHERE ctc.initiator_phone_number = ph_number
   AND ctc.customer_to_customer_id IN (SELECT mes.customer_to_customer_id FROM messages mes));

   SELECT rest - COUNT(*)
   INTO rest
   FROM
   (SELECT cto.customer_to_other_id FROM customer_to_other cto WHERE cto.customer_phone_number = ph_number
   AND customer_is_initiator = TRUE AND cto.customer_to_other_id IN (SELECT mes.customer_to_other_id FROM messages mes));
   
   RETURN rest;
END;
$$;

SELECT get_messages_rest('89001234567');

CREATE FUNCTION get_call_minutes_rest(ph_number VARCHAR(50))
RETURNS INT
LANGUAGE plpgsql
AS
$$
DECLARE
   rest INT;
BEGIN
   SELECT tp.call_minutes_limit
   INTO rest
   FROM traffic_plans tp
   WHERE
   tp.traffic_plan_id = (SELECT sc.traffic_plan_id FROM sim_cards sc WHERE sc.phone_number = ph_number);

   SELECT rest - SUM(cl.call_duration)
   INTO rest
   FROM calls cl
   WHERE
   cl.customer_to_customer_id IN (SELECT ctc.customer_to_customer_id FROM customer_to_customer ctc WHERE ctc.initiator_phone_number = ph_number)
   OR cl.customer_to_other_id IN (SELECT cto.customer_to_other_id FROM customer_to_other cto WHERE cto.customer_is_initiator = TRUE AND cto.customer_phone_number = ph_number);
   
   RETURN rest;
END;
$$;

SELECT get_call_minutes_rest('89001234567');

SELECT * FROM messages mes
WHERE
mes.customer_to_customer_id IN (SELECT ctc.customer_to_customer_id FROM customer_to_customer ctc WHERE ctc.initiator_phone_number = '89001234567')
OR mes.customer_to_other_id IN (SELECT cto.customer_to_other_id FROM customer_to_other cto WHERE customer_is_initiator = TRUE AND customer_phone_number = '89001234567');

-- LW_2

CREATE OR REPLACE PROCEDURE create_new_traffic_plan
(new_title VARCHAR(50),
new_monthly_cost REAL,
new_internet_data_limit REAL,
new_call_minutes_limit INT,
new_messages_limit INT)
LANGUAGE plpgsql
AS
$$
BEGIN
	INSERT INTO traffic_plans (
		title,
		monthly_cost,
		internet_data_limit,
		call_minutes_limit,
		messages_limit
	)
	VALUES
	(
		new_title,
		new_monthly_cost,
		new_internet_data_limit,
		new_call_minutes_limit,
		new_messages_limit
	);
END;
$$;

CALL create_new_traffic_plan('Home', 499.99, 20.0, 700, 50);

CREATE OR REPLACE FUNCTION is_our_client(new_phone_number VARCHAR(50))
RETURNS BOOL
LANGUAGE plpgsql
AS
$$
BEGIN
	RETURN EXISTS (SELECT * FROM sim_cards WHERE phone_number = new_phone_number);
END;
$$;

CREATE OR REPLACE FUNCTION get_customer_to_customer_id
(new_initiator_phone_number VARCHAR(50),
new_interlocutor_phone_number VARCHAR(50))
RETURNS INT
LANGUAGE plpgsql
AS $$
BEGIN
	RETURN (SELECT customer_to_customer_id FROM customer_to_customer
	WHERE initiator_phone_number = new_initiator_phone_number
	AND interlocutor_phone_number = new_interlocutor_phone_number);
END;
$$;

CREATE OR REPLACE FUNCTION get_customer_to_other_id
(new_initiator_phone_number VARCHAR(50),
new_interlocutor_phone_number VARCHAR(50),
new_customer_is_initiator BOOL)
RETURNS INT
LANGUAGE plpgsql
AS $$
BEGIN
	RETURN (SELECT customer_to_other_id
	FROM customer_to_other
	WHERE customer_phone_number = new_interlocutor_phone_number AND
	other_phone_number = new_initiator_phone_number AND customer_is_initiator = new_customer_is_initiator);
END;
$$;

CREATE OR REPLACE PROCEDURE insert_message
(new_message_content VARCHAR(255),
new_message_date_time TIMESTAMP,
new_customer_to_customer_id INT,
new_customer_to_orher_id INT)
LANGUAGE plpgsql
AS
$$
BEGIN
	IF (new_customer_to_orher_id IS NULL) THEN
		INSERT INTO messages (message_content, message_date_time, customer_to_customer_id)
		VALUES (new_message_content, new_message_date_time, new_customer_to_customer_id);
	ELSE
		INSERT INTO messages (message_content, message_date_time, customer_to_other_id)
		VALUES (new_message_content, new_message_date_time, new_customer_to_orher_id);
	END IF;
END;
$$;

CREATE OR REPLACE PROCEDURE new_message
(new_message_content VARCHAR(255),
new_message_date_time TIMESTAMP,
new_initiator_phone_number VARCHAR(50),
new_interlocutor_phone_number VARCHAR(50))
LANGUAGE plpgsql
AS
$$
DECLARE
	new_id INT;
BEGIN
	IF (SELECT is_our_client(new_initiator_phone_number))
	AND (SELECT is_our_client(new_interlocutor_phone_number))
	THEN
		IF EXISTS
		(SELECT * FROM customer_to_customer
		WHERE initiator_phone_number = new_initiator_phone_number
		AND interlocutor_phone_number = new_interlocutor_phone_number) THEN
			SELECT get_customer_to_customer_id(new_initiator_phone_number, new_interlocutor_phone_number) INTO new_id;

			CALL insert_message(new_message_content, new_message_date_time, new_id, NULL);
		ELSE
			INSERT INTO customer_to_customer (initiator_phone_number, interlocutor_phone_number)
			VALUES (new_initiator_phone_number, new_interlocutor_phone_number);
		
			SELECT get_customer_to_customer_id(new_initiator_phone_number, new_interlocutor_phone_number) INTO new_id;

			CALL insert_message(new_message_content, new_message_date_time, new_id, NULL);
		END IF;
	ELSIF (SELECT is_our_client(new_initiator_phone_number))
	OR (SELECT is_our_client(new_interlocutor_phone_number)) THEN

		IF (SELECT is_our_client(new_initiator_phone_number)) THEN
			IF EXISTS (SELECT * FROM customer_to_other
			WHERE customer_phone_number = new_initiator_phone_number AND
			other_phone_number = new_interlocutor_phone_number AND customer_is_initiator = TRUE) THEN
				SELECT get_customer_to_other_id
				(new_initiator_phone_number,
				new_interlocutor_phone_number,
				TRUE) INTO new_id;

				CALL insert_message(new_message_content, new_message_date_time, NULL, new_id);
			ELSE
				INSERT INTO customer_to_other (customer_is_initiator, other_phone_number, customer_phone_number)
				VALUES (TRUE, new_interlocutor_phone_number, new_initiator_phone_number);

				SELECT get_customer_to_other_id
				(new_initiator_phone_number,
				new_interlocutor_phone_number,
				TRUE) INTO new_id;

				CALL insert_message(new_message_content, new_message_date_time, NULL, new_id);
			END IF;
		ELSE
			IF EXISTS (SELECT * FROM customer_to_other
			WHERE customer_phone_number = new_interlocutor_phone_number AND
			other_phone_number = new_initiator_phone_number AND customer_is_initiator = FALSE) THEN
				SELECT get_customer_to_other_id
				(new_initiator_phone_number,
				new_interlocutor_phone_number,
				FALSE) INTO new_id;

				CALL insert_message(new_message_content, new_message_date_time, NULL, new_id);
			ELSE
				INSERT INTO customer_to_other (customer_is_initiator, other_phone_number, customer_phone_number)
				VALUES (FALSE, new_initiator_phone_number, new_interlocutor_phone_number);

				SELECT get_customer_to_other_id
				(new_initiator_phone_number,
				new_interlocutor_phone_number,
				FALSE) INTO new_id;

				CALL insert_message(new_message_content, new_message_date_time, NULL, new_id);
			END IF;
		END IF;
	END IF;
END;
$$;


CALL new_message('Content', '2024-10-06 14:49:23', '89007654321', '89229060764');
CALL new_message('Contentdadsa', '2024-10-06 14:49:23', '89229060764', '89007654321');
CALL new_message('Content to other', '2024-10-06 14:49:23', '89007654321', '89001234567');
CALL new_message('Content to cust', '2024-10-06 14:49:23', '89001234567', '89007654321');

CREATE OR REPLACE FUNCTION add_to_balance()
RETURNS TRIGGER
LANGUAGE plpgsql
AS
$$
BEGIN
	IF (NEW.balance - OLD.balance >= 2000) THEN
		UPDATE sim_cards SET balance = NEW.balance + 500
		WHERE phone_number = OLD.phone_number;
	END IF;
	RETURN NEW;
END;
$$;

CREATE OR REPLACE TRIGGER add_bonus
AFTER UPDATE ON sim_cards
FOR EACH ROW
EXECUTE FUNCTION add_to_balance();

UPDATE sim_cards SET balance = 4500 WHERE phone_number = '89001234567';

SELECT * from sim_cards;


CREATE OR REPLACE FUNCTION genetate_phone_number()
RETURNS TRIGGER
LANGUAGE plpgsql
AS
$$
DECLARE
	gen_phone_number VARCHAR(50);
BEGIN
	LOOP
		gen_phone_number := '8' || FLOOR(RANDOM() * 89999 + 10000)::TEXT || FLOOR(RANDOM() * 89999 + 10000)::TEXT;
		IF NOT EXISTS (SELECT * FROM sim_cards WHERE phone_number = gen_phone_number) THEN
			NEW.phone_number := gen_phone_number;
			EXIT;
		END IF;
	END LOOP;
	RETURN NEW;
END;
$$;

CREATE OR REPLACE TRIGGER new_sim_card_with_generate_phone_number
BEFORE INSERT ON sim_cards
FOR EACH ROW
EXECUTE FUNCTION genetate_phone_number();

INSERT INTO sim_cards (registration_date, balance, traffic_plan_id, personal_account_number)
VALUES 
('2023-03-01', 230.00, 3, 1000000003);

-- LW_3

create index idx_customers_personal_account_number on customers (personal_account_number);

create unique index idx_customers_email on customers (email);

create index idx_traffic_plans_id on traffic_plans (traffic_plan_id);

create index idx_sim_cards_phone_number on sim_cards (phone_number);

create index idx_customer_to_customer on customer_to_customer (initiator_phone_number, interlocutor_phone_number);

create index idx_customer_to_other on customer_to_other (other_phone_number, customer_phone_number);

create index idx_customer_to_other_iniciator on customer_to_other (customer_is_initiator, other_phone_number, customer_phone_number);

create index idx_messages_id on messages (message_id);

create index idx_messages_date on messages (message_date_time);

create index idx_calls_id on calls (call_id);

create index idx_calls_date on calls (call_date_time);

create or replace view phone_numbers_view AS
select 
  s.phone_number,
  s.registration_date,
  t.title AS traffic_plan_title
from 
  sim_cards s
join 
  traffic_plans t
on
  s.traffic_plan_id = t.traffic_plan_id;

select * from phone_numbers_view;
